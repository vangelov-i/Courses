01 Write a SQL query to find the names and salaries of the employees that take the minimal salary in the company. Use a nested SELECT statement.

SELECT FirstName, Salary
FROM Employees
WHERE Salary = (SELECT MIN(Salary) FROM Employees)

-----------------------------------------------------------------------

02 Write a SQL query to find the names and salaries of the employees that have a salary that is up to 10% higher than the minimal salary for the company.

SELECT FirstName, Salary
FROM Employees
WHERE Salary <= (SELECT MIN(Salary) FROM Employees) * 1.10

-----------------------------------------------------------------------

03 Write a SQL query to find the full name, salary and department of the employees that take the minimal salary in their department. Use a nested SELECT statement.

SELECT 
	FirstName + ' ' + LastName AS [Full Name],
	Salary,
	d.Name
FROM Employees e, Departments d
WHERE 
	e.DepartmentID = d.DepartmentID 
	AND 
	(e.Salary = (
		SELECT MIN(Salary) 
		FROM Employees e1
		WHERE e1.DepartmentID = d.DepartmentID)
		)
ORDER BY e.Salary, e.DepartmentID

-----------------------------------------------------------------------

04 Write a SQL query to find the average salary in the department #1.

SELECT AVG(Salary)
FROM Employees
WHERE DepartmentID = 1

-----------------------------------------------------------------------

05 Write a SQL query to find the average salary  in the "Sales" department.

SELECT AVG(Salary)
FROM Employees e
	JOIN Departments d
		ON e.DepartmentID = d.DepartmentID AND d.Name = 'Sales'

-----------------------------------------------------------------------

06 Write a SQL query to find the number of employees in the "Sales" department.

SELECT COUNT(*)
FROM Employees e
	JOIN Departments d
		ON e.DepartmentID = d.DepartmentID AND d.Name = 'Sales'

-----------------------------------------------------------------------

07 Write a SQL query to find the number of all employees that have manager.

SELECT COUNT(*)
FROM Employees e
	JOIN Employees m
		ON e.ManagerID = m.EmployeeID

-----------------------------------------------------------------------

08 Write a SQL query to find the number of all employees that have no manager.

SELECT COUNT(*)
FROM Employees e
WHERE ManagerID IS NULL

-----------------------------------------------------------------------

09 Write a SQL query to find all departments and the average salary for each of them.

SELECT d.Name, (SELECT AVG(Salary)
				FROM Employees e
					JOIN Departments d1
						ON 
							e.DepartmentID = d1.DepartmentID 
							AND 
							d1.Name = d.Name) 
						AS [Avg Salary]
FROM Departments d

-----------------------------------------------------------------------

10 Write a SQL query to find the count of all employees in each department and for each town.

SELECT d.Name, (SELECT COUNT(*)	
				FROM Employees e
					JOIN Departments d1
						ON 
							e.DepartmentID = d1.DepartmentID 
							AND 
							d1.Name = D.Name) 
				AS [Workers Count]
FROM Departments d

-----------------------------------------------------------------------

11 Write a SQL query to find all managers that have exactly 5 employees. Display their first name and last name.

SELECT 
	BigManagers.FirstName + ' ' + BigManagers.LastName AS [Manager Full Name], 
	[Subordinates Count]
FROM (SELECT m1.FirstName, m1.LastName, (SELECT COUNT(*)
							FROM Employees e
								JOIN Employees m
									ON e.ManagerID = m.EmployeeID
									AND
									m1.EmployeeID = m.EmployeeID)
							AS [Subordinates Count]
						FROM Employees m1) AS BigManagers
WHERE [Subordinates Count] = 5

-----------------------------------------------------------------------

12 Write a SQL query to find all employees along with their managers. For employees that do not have manager display the value "(no manager)".

SELECT e.FirstName, ISNULL(m.FirstName, '(no manager)') AS Manager
FROM Employees e
	LEFT JOIN Employees m
		ON e.ManagerID = m.EmployeeID

-----------------------------------------------------------------------

13 Write a SQL query to find the names of all employees whose last name is exactly 5 characters long. Use the built-in LEN(str) function.

SELECT e.FirstName + ' ' + e.LastName AS [Full Name]
FROM Employees e
WHERE LEN(e.LastName) = 5

-----------------------------------------------------------------------

14 Write a SQL query to display the current date and time in the following format "day.month.year hour:minutes:seconds:milliseconds". Search in  Google to find how to format dates in SQL Server.

SELECT REPLACE(CONVERT(nvarchar(50), GETDATE(), 113), ' ', '.')

-----------------------------------------------------------------------

15 Write a SQL statement to create a table Users. Users should have username, password, full name and last login time. Choose appropriate data types for the table fields. Define a primary key column with a primary key constraint. Define the primary key column as identity to facilitate inserting records. Define unique constraint to avoid repeating usernames. Define a check constraint to ensure the password is at least 5 characters long.

CREATE TABLE Users (
UserID int IDENTITY,
Username nvarchar(50) NOT NULL,
UserPassword nvarchar(50) NOT NULL,
FirstName nvarchar(50) NOT NULL,
LastName nvarchar(50) NOT NULL,
LastLogIn datetime,
CONSTRAINT PK_Users PRIMARY KEY(UserID),
CONSTRAINT AK_Username UNIQUE(Username),
CONSTRAINT CHK_UserPassword CHECK (LEN(UserPassword) >= 5)
)
GO

-----------------------------------------------------------------------

16 Write a SQL statement to create a view that displays the users from the Users table that have been in the system today. Test if the view works correctly.



-----------------------------------------------------------------------

17 Write a SQL statement to create a table Groups. Groups should have unique name (use unique constraint). Define primary key and identity column.

CREATE TABLE Groups (
GroupID int IDENTITY,
Name nvarchar(50) NOT NULL,
CONSTRAINT PK_Groups PRIMARY KEY(GroupID),
CONSTRAINT AK_Name UNIQUE(Name)
)
GO

-----------------------------------------------------------------------

18 Write a SQL statement to add a column GroupID to the table Users. Fill some data in this new column and as well in the Groups table. Write a SQL statement to add a foreign key constraint between tables Users and Groups tables.

ALTER TABLE Users 
ADD GroupID int NOT NULL
GO

INSERT INTO Users (
	Username, 
	UserPassword, 
	FirstName, 
	LastName, 
	GroupID)
VALUES
('Az', 'moqtPass', 'Jorji', 'Gaytanski', 1),
('Toi', 'negoviqtPass', 'Gaytan', 'Jorjiev', 2)
GO

INSERT INTO Groups
VALUES
('Pyrva Grupa'),
('Vtora Grupa')
GO

ALTER TABLE Users
ADD CONSTRAINT
FK_Users_Gruups FOREIGN KEY (GroupID)
REFERENCES Groups(GroupID)
GO 

-----------------------------------------------------------------------

19 Write SQL statements to insert several records in the Users and Groups tables.

INSERT INTO Groups
VALUES
('Treta Grupa'),
('Chetvyrta Grupa'),
('Peta Grupa')
GO

INSERT INTO Users (
	Username, 
	UserPassword, 
	FirstName, 
	LastName, 
	GroupID)
VALUES
('Shebek', 'zemiSiPass', 'Petko', 'Voivoda', 3),
('Debil', 'nqmaPass', 'Petko', 'Strashnika', 5)
GO

-----------------------------------------------------------------------

20 Write SQL statements to update some of the records in the Users and Groups tables.

UPDATE Users
SET UserPassword = 'smenqmSiPassa'
WHERE Username = 'Shebek'

UPDATE Users
SET GroupID = 4
WHERE Username = 'Debil'

UPDATE Groups
SET Name = 'Treta Grupa be'
WHERE Name = 'Treta Grupa'

-----------------------------------------------------------------------

21 Write SQL statements to delete some of the records from the Users and Groups tables.

DELETE FROM Users
WHERE Username = 'Az'

DELETE FROM Groups
WHERE Name = 'Peta Grupa'

-----------------------------------------------------------------------

22 Write SQL statements to insert in the Users table the names of all employees from the Employees table. Combine the first and last names as a full name. For username use the first letter of the first name + the last name (in lowercase). Use the same for the password, and NULL for last login time.

INSERT INTO Users (
	Username,
	UserPassword,
	FirstName,
	LastName,
	GroupID
	)
SELECT 
	LOWER(SUBSTRING(FirstName,1,3) + Lastname),
	LOWER(SUBSTRING(FirstName,1,3) + Lastname),
	FirstName,
	LastName,
	ASCII(SUBSTRING(FirstName, 1,1)) % 4 + 1
FROM Employees
GO

-----------------------------------------------------------------------

23 Write a SQL statement that changes the password to NULL for all users that have not been in the system since 10.03.2010.



-----------------------------------------------------------------------

24 Write a SQL statement that deletes all users without passwords (NULL password).



-----------------------------------------------------------------------

25 Write a SQL query to display the average employee salary by department and job title.

SELECT 
	d.Name AS [Department Name],
	e.JobTitle,
	AVG(Salary) AS [Avg Salary]
FROM Departments d
	JOIN Employees e
		ON e.DepartmentID = d.DepartmentID
GROUP BY d.Name, e.JobTitle

-----------------------------------------------------------------------

26 Write a SQL query to display the minimal employee salary by department and job title along with the name of some of the employees that take it.

SELECT 
	d.Name AS [Department],
	e.JobTitle,
	MIN(Salary) AS [Min Salary],
	MIN(e.FirstName + ' ' + e.LastName) AS [Emplyee Full Name]
FROM Departments d
	JOIN Employees e
		ON e.DepartmentID = d.DepartmentID
GROUP BY d.Name, e.JobTitle

-----------------------------------------------------------------------

27 Write a SQL query to display the town where maximal number of employees work.

SELECT TOP 1 t.Name, COUNT(e.EmployeeID) AS [Working People Count]
FROM Addresses a
	JOIN Employees e
		ON e.AddressID = a.AddressID
	JOIN Towns t
		ON t.TownID = a.TownID
GROUP BY t.Name
ORDER BY [Working People Count] DESC

-----------------------------------------------------------------------

28 Write a SQL query to display the number of managers from each town.

SELECT t.Name, COUNT(DISTINCT m.EmployeeID) AS [Managers Count]
FROM Employees e
	JOIN Employees m
		ON e.ManagerID = m.EmployeeID
	JOIN Addresses a
		ON m.AddressID = a.AddressID
	JOIN Towns t
		ON t.TownID = a.TownID
GROUP BY t.Name
ORDER BY [Managers Count] DESC

-----------------------------------------------------------------------

29 Write a SQL to create table WorkHours to store work reports for each employee (employee id, date, task, hours, comments). Don't forget to define  identity, primary key and appropriate foreign key. 
	Issue few SQL statements to insert, update and delete of some data in the table.
	Define a table WorkHoursLogs to track all changes in the WorkHours table with triggers. For each change keep the old record data, the new record data and the command (insert / update / delete).



-----------------------------------------------------------------------

30 Start a database transaction, delete all employees from the 'Sales' department along with all dependent records from the pother tables. At the end rollback the transaction.



-----------------------------------------------------------------------

31 Start a database transaction and drop the table EmployeesProjects. Now how you could restore back the lost table data?



-----------------------------------------------------------------------

32 Find how to use temporary tables in SQL Server. Using temporary tables backup all records from EmployeesProjects and restore them back after dropping and re-creating the table.



-----------------------------------------------------------------------